{"version":3,"sources":["webpack://ballerinaHighlighter/./node_modules/monaco-editor/esm/vs/basic-languages/css/css.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","ws","identifier","token","tokenizer","root","include","selector","next","selectorbody","selectorname","selectorattribute","term","rulevalue","warndebug","import","urldeclaration","parenthizedterm","declarationbody","comment","name","numbers","units","keyframedeclaration","switchTo","keyframebody","functioninvocation","functionarguments","strings","stringenddoublequote","stringendquote"],"mappings":"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","file":"10.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|((::|[@#.!:])?[\\w-?]+%?)|::|[@#.!:]/g,\n    comments: {\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n            end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.css',\n    ws: '[ \\t\\n\\r\\f]*',\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.bracket' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@selector' },\n        ],\n        selector: [\n            { include: '@comments' },\n            { include: '@import' },\n            { include: '@strings' },\n            ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', { token: 'keyword', next: '@keyframedeclaration' }],\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n            ['(url-prefix)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            ['(url)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            { include: '@selectorname' },\n            ['[\\\\*]', 'tag'],\n            ['[>\\\\+,]', 'delimiter'],\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }]\n        ],\n        selectorbody: [\n            { include: '@comments' },\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\n            ['}', { token: 'delimiter.bracket', next: '@pop' }]\n        ],\n        selectorname: [\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'],\n        ],\n        selectorattribute: [\n            { include: '@term' },\n            [']', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        term: [\n            { include: '@comments' },\n            ['(url-prefix)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            ['(url)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            { include: '@functioninvocation' },\n            { include: '@numbers' },\n            { include: '@name' },\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'delimiter'],\n            [',', 'delimiter']\n        ],\n        rulevalue: [\n            { include: '@comments' },\n            { include: '@strings' },\n            { include: '@term' },\n            ['!important', 'keyword'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        warndebug: [\n            ['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]\n        ],\n        import: [\n            ['[@](import)', { token: 'keyword', next: '@declarationbody' }]\n        ],\n        urldeclaration: [\n            { include: '@strings' },\n            ['[^)\\r\\n]+', 'string'],\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        parenthizedterm: [\n            { include: '@term' },\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        declarationbody: [\n            { include: '@term' },\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        comments: [\n            ['\\\\/\\\\*', 'comment', '@comment'],\n            ['\\\\/\\\\/+.*', 'comment']\n        ],\n        comment: [\n            ['\\\\*\\\\/', 'comment', '@pop'],\n            [/[^*/]+/, 'comment'],\n            [/./, 'comment'],\n        ],\n        name: [\n            ['@identifier', 'attribute.value']\n        ],\n        numbers: [\n            ['-?(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'attribute.value.number', next: '@units' }],\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'attribute.value.hex']\n        ],\n        units: [\n            ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'attribute.value.unit', '@pop']\n        ],\n        keyframedeclaration: [\n            ['@identifier', 'attribute.value'],\n            ['{', { token: 'delimiter.bracket', switchTo: '@keyframebody' }],\n        ],\n        keyframebody: [\n            { include: '@term' },\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }],\n            ['}', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        functioninvocation: [\n            ['@identifier\\\\(', { token: 'attribute.value', next: '@functionarguments' }],\n        ],\n        functionarguments: [\n            ['\\\\$@identifier@ws:', 'attribute.name'],\n            ['[,]', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'attribute.value', next: '@pop' }],\n        ],\n        strings: [\n            ['~?\"', { token: 'string', next: '@stringenddoublequote' }],\n            ['~?\\'', { token: 'string', next: '@stringendquote' }]\n        ],\n        stringenddoublequote: [\n            ['\\\\\\\\.', 'string'],\n            ['\"', { token: 'string', next: '@pop' }],\n            [/[^\\\\\"]+/, 'string'],\n            ['.', 'string']\n        ],\n        stringendquote: [\n            ['\\\\\\\\.', 'string'],\n            ['\\'', { token: 'string', next: '@pop' }],\n            [/[^\\\\']+/, 'string'],\n            ['.', 'string']\n        ]\n    }\n};\n"],"sourceRoot":""}