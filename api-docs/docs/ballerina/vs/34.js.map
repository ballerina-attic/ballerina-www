{"version":3,"sources":["webpack://ballerinaHighlighter/./node_modules/monaco-editor/esm/vs/basic-languages/python/python.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","_monaco","monaco","self","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","onEnterRules","beforeText","RegExp","action","indentAction","languages","IndentAction","Indent","folding","offSide","markers","start","end","defaultToken","tokenPostfix","keywords","token","tokenizer","root","include","cases","@keywords","@default","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody"],"mappings":"mIAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMA,IAAAC,EAAA,oBAAAC,OAAAC,KAAAD,cACOH,EAAA,CACPK,SAAA,CACAC,YAAA,IACAC,aAAA,eAEAC,SAAA,CACA,KAAW,KACX,UACA,WAEAC,iBAAA,CACA,CAASC,KAAA,IAASC,MAAA,KAClB,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,IAAAC,MAAA,YACT,CAASF,KAAA,IAAAC,MAAA,IAAAC,MAAA,uBAETC,iBAAA,CACA,CAASH,KAAA,IAASC,MAAA,KAClB,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,MAETG,aAAA,CACA,CACAC,WAAA,IAAAC,OAAA,oFACAC,OAAA,CAAqBC,aAAAhB,EAAAiB,UAAAC,aAAAC,UAGrBC,QAAA,CACAC,SAAA,EACAC,QAAA,CACAC,MAAA,IAAAT,OAAA,mBACAU,IAAA,IAAAV,OAAA,yBAIOf,EAAA,CACP0B,aAAA,GACAC,aAAA,UACAC,SAAA,CACA,MACA,KACA,SACA,QACA,QACA,WACA,MACA,MACA,OACA,OACA,SACA,OACA,UACA,MACA,OACA,SACA,KACA,SACA,KACA,KACA,SACA,OACA,MACA,KACA,OACA,QACA,QACA,SACA,OACA,MACA,QACA,OACA,QACA,MACA,QACA,OACA,UACA,MACA,MACA,MACA,MACA,QACA,aACA,MACA,OACA,SACA,YACA,WACA,MACA,cACA,MACA,SACA,UACA,UACA,UACA,OACA,MACA,SACA,YACA,OACA,WACA,OACA,SACA,SACA,YACA,UACA,UACA,UACA,OACA,OACA,KACA,QACA,SACA,aACA,aACA,OACA,MACA,SACA,OACA,MACA,MACA,aACA,MACA,OACA,SACA,MACA,OACA,MACA,MACA,QACA,WACA,WACA,QACA,YACA,SACA,SACA,OACA,WACA,QACA,MACA,UACA,QACA,SACA,eACA,MACA,MACA,QACA,QACA,OACA,SACA,UACA,OACA,SACA,MACA,OACA,QACA,WACA,cACA,cACA,YACA,YACA,WACA,UACA,iBACA,WACA,cAEArB,SAAA,CACA,CAASE,KAAA,IAASC,MAAA,IAAYmB,MAAA,mBAC9B,CAASpB,KAAA,IAAAC,MAAA,IAAAmB,MAAA,qBACT,CAASpB,KAAA,IAAAC,MAAA,IAAAmB,MAAA,0BAETC,UAAA,CACAC,KAAA,CACA,CAAaC,QAAA,eACb,CAAaA,QAAA,YACb,CAAaA,QAAA,YACb,SAAkB,aAClB,cAAiB,aACjB,uBACA,gBACAC,MAAA,CACAC,YAAA,UACAC,WAAA,iBAKAC,WAAA,CACA,gBACA,sBACA,iCACA,qCAEAC,aAAA,CACA,mBACA,iBACA,2BACA,gBAEAC,gBAAA,CACA,mBACA,iBACA,2BACA,gBAGAC,QAAA,CACA,kDACA,sDAGAC,QAAA,CACA,iCACA,oCACA,iCACA,wCAEAC,WAAA,CACA,gCACA,qBACA,iBACA,gCACA,kBAEAC,cAAA,CACA,gCACA,qBACA,iBACA,gCACA","file":"34.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\nexport var conf = {\n    comments: {\n        lineComment: '#',\n        blockComment: ['\\'\\'\\'', '\\'\\'\\''],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(\"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$\"),\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\n        }\n    ],\n    folding: {\n        offSide: true,\n        markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.python',\n    keywords: [\n        'and',\n        'as',\n        'assert',\n        'break',\n        'class',\n        'continue',\n        'def',\n        'del',\n        'elif',\n        'else',\n        'except',\n        'exec',\n        'finally',\n        'for',\n        'from',\n        'global',\n        'if',\n        'import',\n        'in',\n        'is',\n        'lambda',\n        'None',\n        'not',\n        'or',\n        'pass',\n        'print',\n        'raise',\n        'return',\n        'self',\n        'try',\n        'while',\n        'with',\n        'yield',\n        'int',\n        'float',\n        'long',\n        'complex',\n        'hex',\n        'abs',\n        'all',\n        'any',\n        'apply',\n        'basestring',\n        'bin',\n        'bool',\n        'buffer',\n        'bytearray',\n        'callable',\n        'chr',\n        'classmethod',\n        'cmp',\n        'coerce',\n        'compile',\n        'complex',\n        'delattr',\n        'dict',\n        'dir',\n        'divmod',\n        'enumerate',\n        'eval',\n        'execfile',\n        'file',\n        'filter',\n        'format',\n        'frozenset',\n        'getattr',\n        'globals',\n        'hasattr',\n        'hash',\n        'help',\n        'id',\n        'input',\n        'intern',\n        'isinstance',\n        'issubclass',\n        'iter',\n        'len',\n        'locals',\n        'list',\n        'map',\n        'max',\n        'memoryview',\n        'min',\n        'next',\n        'object',\n        'oct',\n        'open',\n        'ord',\n        'pow',\n        'print',\n        'property',\n        'reversed',\n        'range',\n        'raw_input',\n        'reduce',\n        'reload',\n        'repr',\n        'reversed',\n        'round',\n        'set',\n        'setattr',\n        'slice',\n        'sorted',\n        'staticmethod',\n        'str',\n        'sum',\n        'super',\n        'tuple',\n        'type',\n        'unichr',\n        'unicode',\n        'vars',\n        'xrange',\n        'zip',\n        'True',\n        'False',\n        '__dict__',\n        '__methods__',\n        '__members__',\n        '__class__',\n        '__bases__',\n        '__name__',\n        '__mro__',\n        '__subclasses__',\n        '__init__',\n        '__import__'\n    ],\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@numbers' },\n            { include: '@strings' },\n            [/[,:;]/, 'delimiter'],\n            [/[{}\\[\\]()]/, '@brackets'],\n            [/@[a-zA-Z]\\w*/, 'tag'],\n            [/[a-zA-Z]\\w*/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'identifier'\n                    }\n                }]\n        ],\n        // Deal with white space, including single and multi-line comments\n        whitespace: [\n            [/\\s+/, 'white'],\n            [/(^#.*$)/, 'comment'],\n            [/'''/, 'string', '@endDocString'],\n            [/\"\"\"/, 'string', '@endDblDocString']\n        ],\n        endDocString: [\n            [/[^']+/, 'string'],\n            [/\\\\'/, 'string'],\n            [/'''/, 'string', '@popall'],\n            [/'/, 'string']\n        ],\n        endDblDocString: [\n            [/[^\"]+/, 'string'],\n            [/\\\\\"/, 'string'],\n            [/\"\"\"/, 'string', '@popall'],\n            [/\"/, 'string']\n        ],\n        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n        numbers: [\n            [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\n            [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']\n        ],\n        // Recognize strings, including those broken across lines with \\ (but not without)\n        strings: [\n            [/'$/, 'string.escape', '@popall'],\n            [/'/, 'string.escape', '@stringBody'],\n            [/\"$/, 'string.escape', '@popall'],\n            [/\"/, 'string.escape', '@dblStringBody']\n        ],\n        stringBody: [\n            [/[^\\\\']+$/, 'string', '@popall'],\n            [/[^\\\\']+/, 'string'],\n            [/\\\\./, 'string'],\n            [/'/, 'string.escape', '@popall'],\n            [/\\\\$/, 'string']\n        ],\n        dblStringBody: [\n            [/[^\\\\\"]+$/, 'string', '@popall'],\n            [/[^\\\\\"]+/, 'string'],\n            [/\\\\./, 'string'],\n            [/\"/, 'string.escape', '@popall'],\n            [/\\\\$/, 'string']\n        ]\n    }\n};\n"],"sourceRoot":""}