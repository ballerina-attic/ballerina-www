{"version":3,"sources":["webpack://ballerinaHighlighter/./node_modules/monaco-editor/esm/vs/basic-languages/powershell/powershell.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","ignoreCase","tokenPostfix","token","keywords","helpKeywords","symbols","escapes","tokenizer","root","cases","@keywords","@default","@eos","next","string","$S2==\"","$#==$S2","herestring","$1==$S2","comment"],"mappings":"mIAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAKO,IAAAD,EAAA,CAEPE,YAAA,oFACAC,SAAA,CACAC,YAAA,IACAC,aAAA,aAEAC,SAAA,CACA,KAAW,KACX,UACA,WAEAC,iBAAA,CACA,CAASC,KAAA,IAASC,MAAA,KAClB,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,IAAAC,MAAA,YACT,CAASF,KAAA,IAAAC,MAAA,IAAAC,MAAA,uBAETC,iBAAA,CACA,CAASH,KAAA,IAASC,MAAA,KAClB,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,MAETG,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,mBACAC,IAAA,IAAAD,OAAA,yBAIOd,EAAA,CACPgB,aAAA,GACAC,YAAA,EACAC,aAAA,OACAb,SAAA,CACA,CAASc,MAAA,kBAAAZ,KAAA,IAAmCC,MAAA,KAC5C,CAASW,MAAA,mBAAAZ,KAAA,IAAAC,MAAA,KACT,CAASW,MAAA,wBAAAZ,KAAA,IAAAC,MAAA,MAETY,SAAA,CACA,kDACA,mDACA,iDACA,gDACA,8CACA,+EAEAC,aAAA,0KAEAC,QAAA,2BACAC,QAAA,wEAEAC,UAAA,CACAC,KAAA,CAEA,oBACAC,MAAA,CACAC,YAAA,CAAsCR,MAAA,cACtCS,WAAA,MAIA,kBAEA,oBAEA,qGAAiE,YAEjE,4BACA,mBAEA,cAAiB,aACjB,yBAEA,4CACA,+CACA,kBAEA,SAAgB,aAEhB,iCACA,iCACA,MACAF,MAAA,CACAG,OAAA,SACAD,WAAA,CAAqCT,MAAA,SAAAW,KAAA,gBAGrC,MACAJ,MAAA,CACAG,OAAA,SACAD,WAAA,CAAqCT,MAAA,SAAAW,KAAA,iBAIrCC,OAAA,CACA,cACAL,MAAA,CACAG,OAAA,CAAiCV,MAAA,SAAAW,KAAA,WACjCF,WAAA,YAGA,aACAF,MAAA,CACAG,OAAA,CAAiCV,MAAA,gBAAAW,KAAA,WACjCF,WAAA,mBAGA,OACAF,MAAA,CACAG,OAAA,CAAiCV,MAAA,wBAAAW,KAAA,WACjCF,WAAA,2BAGA,aACAF,MAAA,CACAM,SAAA,CAAmCb,MAAA,WAAAW,KAAA,WACnCF,WAAA,CAAqCT,MAAA,SAAAW,KAAA,cAGrC,YACAJ,MAAA,CACAM,SAAA,WACAJ,WAAA,YAGA,SACAF,MAAA,CACAO,UAAA,CAAoCd,MAAA,SAAAW,KAAA,QACpCF,WAAA,CACAF,MAAA,CACAG,OAAA,CAAyCV,MAAA,SAAAW,KAAA,WACzCF,WAAA,eAMAM,WAAA,CACA,gBACAR,MAAA,CACAS,UAAA,CAAoChB,MAAA,SAAAW,KAAA,QACpCF,WAAA,YAGA,qBACA,6BACA,+BACA,YACAF,MAAA,CACAM,SAAA,WACAJ,WAAA,aAIAQ,QAAA,CACA,sBACA,wBACA,8BAA2CjB,MAAA,uBAC3C","file":"32.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    // the default separators except `$-`\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '#',\n        blockComment: ['<#', '#>'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.ps1',\n    brackets: [\n        { token: 'delimiter.curly', open: '{', close: '}' },\n        { token: 'delimiter.square', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' }\n    ],\n    keywords: [\n        'begin', 'break', 'catch', 'class', 'continue', 'data',\n        'define', 'do', 'dynamicparam', 'else', 'elseif', 'end',\n        'exit', 'filter', 'finally', 'for', 'foreach', 'from',\n        'function', 'if', 'in', 'param', 'process', 'return',\n        'switch', 'throw', 'trap', 'try', 'until', 'using',\n        'var', 'while', 'workflow', 'parallel', 'sequence', 'inlinescript', 'configuration'\n    ],\n    helpKeywords: /SYNOPSIS|DESCRIPTION|PARAMETER|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|ROLE|FUNCTIONALITY|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP/,\n    // we include these common regular expressions\n    symbols: /[=><!~?&%|+\\-*\\/\\^;\\.,]+/,\n    escapes: /`(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // commands and keywords\n            [/[a-zA-Z_][\\w-]*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': ''\n                    }\n                }],\n            // whitespace\n            [/[ \\t\\r\\n]+/, ''],\n            // labels\n            [/^:\\w*/, 'metatag'],\n            // variables\n            [/\\$(\\{((global|local|private|script|using):)?[\\w]+\\}|((global|local|private|script|using):)?[\\w]+)/, 'variable'],\n            // Comments\n            [/<#/, 'comment', '@comment'],\n            [/#.*$/, 'comment'],\n            // delimiters\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n            [/\\d+?/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings:\n            [/\\@\"/, 'string', '@herestring.\"'],\n            [/\\@'/, 'string', '@herestring.\\''],\n            [/\"/, {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: '@string.\"' }\n                    }\n                }],\n            [/'/, {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: '@string.\\'' }\n                    }\n                }],\n        ],\n        string: [\n            [/[^\"'\\$`]+/, {\n                    cases: {\n                        '@eos': { token: 'string', next: '@popall' },\n                        '@default': 'string'\n                    }\n                }],\n            [/@escapes/, {\n                    cases: {\n                        '@eos': { token: 'string.escape', next: '@popall' },\n                        '@default': 'string.escape'\n                    }\n                }],\n            [/`./, {\n                    cases: {\n                        '@eos': { token: 'string.escape.invalid', next: '@popall' },\n                        '@default': 'string.escape.invalid'\n                    }\n                }],\n            [/\\$[\\w]+$/, {\n                    cases: {\n                        '$S2==\"': { token: 'variable', next: '@popall' },\n                        '@default': { token: 'string', next: '@popall' }\n                    }\n                }],\n            [/\\$[\\w]+/, {\n                    cases: {\n                        '$S2==\"': 'variable',\n                        '@default': 'string'\n                    }\n                }],\n            [/[\"']/, {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': {\n                            cases: {\n                                '@eos': { token: 'string', next: '@popall' },\n                                '@default': 'string'\n                            }\n                        }\n                    }\n                }],\n        ],\n        herestring: [\n            [/^\\s*([\"'])@/, {\n                    cases: {\n                        '$1==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }],\n            [/[^\\$`]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/`./, 'string.escape.invalid'],\n            [/\\$[\\w]+/, {\n                    cases: {\n                        '$S2==\"': 'variable',\n                        '@default': 'string'\n                    }\n                }],\n        ],\n        comment: [\n            [/[^#\\.]+/, 'comment'],\n            [/#>/, 'comment', '@pop'],\n            [/(\\.)(@helpKeywords)(?!\\w)/, { token: 'comment.keyword.$2' }],\n            [/[\\.#]/, 'comment']\n        ],\n    },\n};\n"],"sourceRoot":""}